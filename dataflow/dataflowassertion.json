{
	"name": "dataflowassertion",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_gen2_newemp",
						"type": "DatasetReference"
					},
					"name": "sourceemp"
				},
				{
					"dataset": {
						"referenceName": "ds_dept",
						"type": "DatasetReference"
					},
					"name": "sourcedept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_outputgen2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          doj as string,",
				"          deptno as string,",
				"          salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceemp",
				"source(output(",
				"          deptno as string,",
				"          dname as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcedept",
				"sourceemp, sourcedept assert(expectTrue(!isNull(toDate(doj, 'yyyymmdd')), false, 'assertdoj'),",
				"     expectUnique(empid, false, 'assertempid'),",
				"     expectExists(sourceemp@deptno == sourcedept@deptno, false, 'assertdept')) ~> assert1",
				"assert1 derive(iserror = isError(),",
				"          iserromessage = assertErrorMessages()) ~> derivedColumn1",
				"derivedColumn1 filter(iserror==false()) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['assertdata'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}